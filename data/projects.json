[
  {
    "id": "sample-full-project",
    "title": "Sample Project With Full Metadata",
    "slug": "sample-full-project",
    "description": "Reference implementation that exercises every project data field",
    "detailedDescription": "Used across the site to validate rendering paths for detailed project entries, covering links, images, learnings, and metadata fields.",
    "type": "project",
    "scope": "Led the end-to-end discovery, design, and delivery of the v1 release",
    "prd": "docs/sample-full-project-prd.pdf",
    "businessModel": "Freemium SaaS with usage-based billing for premium insights",
    "status": "completed",
    "techStack": ["Next.js", "TypeScript", "Tailwind CSS", "PostgreSQL", "Stripe"],
    "tags": ["saas", "freemium", "analytics", "payments", "testing", "documentation"],
    "whyBuilt": "Needed a comprehensive example to test new portfolio components",
    "learnings": [
      {
        "content": "Documenting every field helps catch UI regressions early",
        "sentiment": "positive"
      },
      {
        "content": "Automated visual tests benefit from consistent sample data",
        "sentiment": "positive"
      }
    ],
    "favicon": "/images/projects/sample-full-project/favicon.svg",
    "links": {
      "live": "https://example.com/sample-full-project",
      "github": "https://github.com/example/sample-full-project",
      "blog": "https://example.com/blog/sample-full-project",
      "prd": "https://example.com/docs/sample-full-project-prd"
    },
    "images": [
      "/images/projects/sample-full-project/dashboard.png",
      "/images/projects/sample-full-project/mobile.png",
      "https://example.com/sample-full-project/screenshot-dashboard.png",
      "https://example.com/sample-full-project/screenshot-mobile.png"
    ],
    "featured": false,
    "year": 2025,
    "quarter": "Q1"
  },
  {
    "id": "tribe-update",
    "title": "Tribe Update",
    "slug": "tribe-update",
    "description": "Private sharing platform that enables mindful social content sharing.",
    "detailedDescription": [
      "Users can create a 'tribe' of close friends and family to share updates, photos, and videos in a private, ad-free environment.",
      "Features for tribe creators include multiple upload channels (email, SMS, Whatsapp) and the ability to compile their updates into digital (and eventually physical) collectibles.",
      "Recipients can choose how they want to receive updates - via email digests, SMS or Whatsapp, what frequency and signifcance of updates they would like.",
      "An AI assistant compiles the updates into a beautiful gallery format tailored to the recipients preferences."
    ],
    "type": "project",
    "businessModel": "Freemium.",
    "status": "completed",
    "techStack": ["Next.js", "TypeScript", "Tailwind CSS", "PostgreSQL"],
    "tags": [
      "social",
      "messaging",
      "ai",
      "email",
      "sms",
      "notifications",
      "media-sharing",
      "privacy"
    ],
    "whyBuilt": [
      "As I was sharing updates of our newborn child with multiple groups scattered across different platforms I realised that there should be a way to consolidate this manual uploading process.",
      "The problems we are solving are for users - to simplify uploads by consolidaitng multiple user groups into a single upload channel. ",
      "For recipients - to give them control over how they want to receive updates and what frequency/significance of updates they would like to receive.",
      "The platform prompts users to share mindfully by giving them ideas on what to share. The media that is shared is compiled into a digital collectible that can be treasured forever."
    ],
    "learnings": [
      {
        "content": "Implemented best practicies for engineering which resulted in significantly more overhead and complexity compared to a typical vibe coded project.",
        "sentiment": "neutral"
      },
      {
        "content": "Ran multiple audits using Chatgpt and Claude and consolidated results to improve security and frontend",
        "sentiment": "positive"
      },
      {
        "content": "Used SendGrid for email delivery and Twilio for SMS/Whatsapp delivery - both have great documentation which made integration easy",
        "sentiment": "positive"
      },
      {
        "content": "Initial version of this project used too much front end work and was hard to maintain. Re-architected to use server side rendering and static generation where possible to improve performance and reduce complexity",
        "sentiment": "negative"
      },
      {
        "content": "Pivoted project through design process. sometimes its easier to burn it down and restart rather than wade through archeology",
        "sentiment": "negative"
      },
      {
        "content": "Implemented automated testing (lint and type checks) as github actions. Absolutely amazing how much time this saves in the long run",
        "sentiment": "positive"
      }
    ],
    "links": {
      "live": "https://tribeupdate.com/",
      "github": "https://github.com/colin-rod/tribe_mvp/"
    },
    "featured": true,
    "year": 2025,
    "quarter": "Q2"
  },
  {
    "id": "portfolio-revamp",
    "title": "Interactive Portfolio",
    "slug": "portfolio-revamp",
    "description": "A modern, interactive portfolio with dynamic CV system and project showcase",
    "detailedDescription": "Built with Next.js 15, featuring a dynamic CV filtering system, timeline of highlights, and interactive project showcase.",
    "type": "project",
    "status": "in-progress",
    "techStack": ["Next.js", "TypeScript", "Tailwind CSS"],
    "tags": ["portfolio", "personal-brand", "resume", "cv", "filtering", "timeline", "seo"],
    "featured": true,
    "year": 2025,
    "quarter": "Q4"
  },
  {
    "id": "audiograph",
    "title": "Audiograph",
    "slug": "audiograph",
    "description": "Privacy-first analytics application for visualizing Spotify listening habits",
    "detailedDescription": [
      "An analytics platform that allows users to upload their Spotify data export to generate insights about listening history and patterns.",
      "Features include time-based listening insights with weekly cadence charts, listening streaks and visualizations displaying top artists/tracks/genres over various time ranges.",
      "Built with privacy as a core principle using Row Level Security policies to ensure user data remains protected.",
      "Comprehensive database architecture documented in /docs directory with Supabase setup guides."
    ],
    "type": "tool",
    "businessModel": "Free, privacy-first personal analytics tool",
    "status": "live",
    "techStack": [
      "Next.js",
      "TypeScript",
      "Supabase",
      "PostgreSQL",
      "Vitest",
      "Primer React",
      "Sentry",
      "PostHog"
    ],
    "tags": [
      "spotify",
      "music",
      "analytics",
      "data-visualization",
      "privacy",
      "charts",
      "time-series",
      "data-export"
    ],
    "whyBuilt": [
      "When our son was born we had a playlist runnign in the backgorund. A few months after he was born we were curious if we could see what song he was born to",
      "Spotify provides limited listening history but they offer users the ability to export their full listening data",
      "This data is delivered as a json file which is not very user friendly to explore",
      "I wanted to create a privacy-first alternative to visualise this data",
      "I then expanded the data series using Spotify API to fetch additional metadata about tracks, albums and artists to enrich the data set",
      "This project allowed be to experiment with visualizations, charts and time-series data"
    ],
    "learnings": [
      {
        "content": "Was able to deliver this in 48 hours which I was incredibly proud of",
        "sentiment": "positive"
      },
      {
        "content": "Materialized views significantly improved query performance for analytics aggregations",
        "sentiment": "positive"
      },
      {
        "content": "Integrated Sentry for error monitoring and PostHog for product analytics from day one - invaluable for debugging production issues",
        "sentiment": "positive"
      },
      {
        "content": "GitHub Actions CI/CD workflow automated testing and deployment, catching issues before production",
        "sentiment": "positive"
      },
      {
        "content": "If you are curious this was the song he was born to: https://youtu.be/Qtb11P1FWnc?si=IZXNKIMKTBGUTkec ",
        "sentiment": "neutral"
      }
    ],
    "links": {
      "live": "https://audiograph-phi.vercel.app",
      "github": "https://github.com/colin-rod/audiograph"
    },
    "featured": false,
    "year": 2025,
    "quarter": "Q4"
  },
  {
    "id": "raindrop-randomizer",
    "title": "Raindrop Randomizer",
    "slug": "raindrop-randomizer",
    "description": "Web tool to randomly select bookmarks from Raindrop.io collections",
    "detailedDescription": "A simple web application that integrates with Raindrop.io to help users discover random bookmarks from their collections",
    "type": "tool",
    "status": "live",
    "techStack": ["HTML", "JavaScript", "Raindrop.io API"],
    "tags": ["bookmarks", "randomizer", "discovery", "raindrop", "api-integration", "productivity"],
    "whyBuilt": [
      "I Wanted a way to rediscover bookmarks saved in Raindrop.io collections",
      "Built a quick utility to randomly surface content from large bookmark collections",
      "Thsi allowed me to explore Raindrop.io API integration and solve a personal need"
    ],
    "learnings": [
      {
        "content": "Simple HTML/JavaScript tools can be deployed quickly on Vercel without complex build processes",
        "sentiment": "positive"
      },
      {
        "content": "Sometimes simple front end can be sufficient",
        "sentiment": "neutral"
      }
    ],
    "links": {
      "live": "https://raindrop-randomizer.vercel.app",
      "github": "https://github.com/colin-rod/raindrop-randomizer"
    },
    "featured": false,
    "year": 2025,
    "quarter": "Q3"
  },
  {
    "id": "recipe-enrichment",
    "title": "Recipe Enrichment",
    "slug": "recipe-enrichment",
    "description": "Tool to enrich and enhance recipe data with additional metadata and formatting",
    "detailedDescription": "A web application that takes recipe URLs or text and enriches them with structured data, cooking times, ingredient measurements, and improved formatting. Makes recipes easier to follow and more accessible.",
    "type": "tool",
    "status": "live",
    "techStack": ["JavaScript", "HTML", "Web APIs", "OpenAI"],
    "tags": ["recipes", "food", "ai", "notion", "data-enrichment", "parsing", "automation"],
    "whyBuilt": [
      "I had been collecting recipes from various websites into a Notion database using Notion Web Clipper but found the formats inconsistent and hard to follow",
      "I had setup templates but they were cumbersome to work with and go back to populate ",
      "Needed a way to standardize recipe formats from various sources and enrich them with additional metadata",
      "I built a simple webapp that pulls recipes that have incomplete data from the Notion database, uses OpenAI to parse and enrich the recipe data.",
      "The enriched daata is displayed to suers for review and editing and if the suer confirms the data the Notion database is updated via Notion API"
    ],
    "learnings": [
      {
        "content": "Parsing recipe data from different websites requires flexible pattern matching",
        "sentiment": "neutral"
      },
      {
        "content": "I was able to plug my solution into an existing tool to dramatically expand its functionality.",
        "sentiment": "positive"
      },
      {
        "content": "Scraping images from websites is challenging and I wasn't happy with the current implementation so I had to remove this functionality and I currently manually upload the images.",
        "sentiment": "negative"
      }
    ],
    "links": {
      "live": "https://recipe-enrichment.vercel.app",
      "github": "https://github.com/colin-rod/recipe-enrichment"
    },
    "featured": false,
    "year": 2025,
    "quarter": "Q2"
  },
  {
    "id": "raindrop-classifier",
    "title": "Raindrop Classifier",
    "slug": "raindrop-classifier",
    "description": "Automated tool to classify and organize Raindrop.io bookmarks using AI",
    "detailedDescription": "Automatically categorizes and tags bookmarks in Raindrop.io collections using AI-powered classification. Helps maintain organized bookmark collections without manual sorting.",
    "type": "tool",
    "status": "live",
    "techStack": ["JavaScript", "Raindrop.io API", "AI/ML"],
    "tags": [
      "bookmarks",
      "ai",
      "classification",
      "automation",
      "raindrop",
      "tagging",
      "cron-job",
      "organization"
    ],
    "whyBuilt": [
      "Manual bookmark organization is time-consuming and inconsistent",
      "Wanted to explore AI-powered content classification",
      "Automate the process of tagging and categorizing saved content"
    ],
    "learnings": [
      {
        "content": "AI classification can significantly reduce manual organization effort",
        "sentiment": "positive"
      },
      {
        "content": "Raindrop.io API allows bulk operations for efficient processing",
        "sentiment": "positive"
      },
      {
        "content": "I setup a Cron job to run this every week which has been working flawlessly",
        "sentiment": "positive"
      }
    ],
    "links": {
      "github": "https://github.com/colin-rod/raindrop_classifier"
    },
    "featured": false,
    "year": 2025,
    "quarter": "Q3"
  },
  {
    "id": "photo-sorter",
    "title": "Photo Sorter",
    "slug": "photo-sorter",
    "description": "Python script to automatically organize photos by date, location, or metadata",
    "detailedDescription": "A command-line tool that analyzes photo EXIF data and automatically sorts images into organized folder structures. Supports sorting by date, location, camera model, and custom criteria.",
    "type": "tool",
    "status": "live",
    "techStack": ["Python", "File System"],
    "tags": ["photos", "python", "cli", "automation", "scraping", "batch-processing", "archival"],
    "whyBuilt": [
      "I had a dataset of unsorted photos that had been uplaoded onto various newsletters that were beign deprecated",
      "I built a scraper to open each newsletter in the archive, store the images into a database and then download them to my local machine"
    ],
    "learnings": [
      {
        "content": "Python's file handling libraries make batch processing straightforward",
        "sentiment": "positive"
      },
      {
        "content": "Need to build this quickly since the system was being deprecated in 24 hours",
        "sentiment": "positive"
      },
      {
        "content": "Tried to implement a face recognition feature but it was not reliable enough so I removed it from the final version",
        "sentiment": "negative"
      }
    ],
    "links": {
      "github": "https://github.com/colin-rod/photo-sorter"
    },
    "featured": false,
    "year": 2025,
    "quarter": "Q3"
  },
  {
    "id": "baby-name-app",
    "title": "Baby Name App",
    "slug": "baby-name-app",
    "description": "Interactive web app to collaboratively choose baby names",
    "detailedDescription": "A collaborative tool that helps to find the perfect baby name. I wanted to implement ELO style rankings so that the names can be voted on in a fun, engaging way",
    "type": "project",
    "status": "live",
    "techStack": ["JavaScript", "TypeScript", "HTML", "CSS"],
    "tags": [
      "baby",
      "names",
      "elo-ranking",
      "collaborative",
      "swipe-ui",
      "voting",
      "decision-making"
    ],
    "whyBuilt": [
      "Choosing baby names is challenging and I didn't find an exisitng tool taht met my reuqirements.",
      "With this tool users can upload their own list of names and invite people to submit names and/or vote on names",
      "As part of voting process, users are provided with two names at a time and asked to select their preferred name. They can select both or neighter as well. This process continues until all names have been ranked using an ELO style calculation.",
      "This allows multiple people to collaborate on the name selection process and helps to surface names that have the highest consensus among the group.",
      "The ELO style scoring also allow names to be ranked even if they have not been directly compared against each other.",
      "It aso means that names that are polarizing (loved by some, hated by others) will rank lower than names that have broad appeal.",
      "Users also get notifications to checkin and rank names, because their preferences might change over time as they think about it more."
    ],
    "learnings": [
      {
        "content": "Swipe-based interfaces create engaging user experiences for selection tasks",
        "sentiment": "positive"
      },
      {
        "content": "I got really stuck on building an invite system which I had to scrap",
        "sentiment": "negative"
      },
      {
        "content": "Baby name data sources vary widely in quality and completeness and I wasn't able to integrate an API to source names. I had to rely on static datasets which limited the functionality",
        "sentiment": "neutral"
      }
    ],
    "links": {
      "live": "https://baby-name-app-alpha.vercel.app",
      "github": "https://github.com/colin-rod/baby-name-app"
    },
    "featured": false,
    "year": 2025,
    "quarter": "Q2"
  },
  {
    "id": "babypool",
    "title": "BabyPool",
    "slug": "babypool",
    "description": "Fun prediction app for guessing baby birth details",
    "detailedDescription": "A social web application where friends and family can place predictions on baby birth details like date, time, weight, and other characteristics. Features real-time leaderboards, automated scoring, and shareable results for celebrating the new arrival.",
    "type": "project",
    "status": "live",
    "techStack": ["TypeScript", "PostgreSQL", "JavaScript", "CSS"],
    "tags": [
      "baby",
      "predictions",
      "social",
      "gamification",
      "leaderboard",
      "real-time",
      "scoring",
      "family"
    ],
    "whyBuilt": [
      "Wanted to create a fun, engaging way for friends and family to participate in the pregnancy journey",
      "Existing baby pool tools were outdated or lacked modern features",
      "Build a real-time application with live updates and scoring",
      "Create shareable, memorable experience for the birth announcement"
    ],
    "learnings": [
      {
        "content": "PostgreSQL database design for handling predictions and scoring logic",
        "sentiment": "positive"
      },
      {
        "content": "Real-time updates enhance user engagement for social prediction games",
        "sentiment": "positive"
      },
      {
        "content": "Dealt with singificant scope creep as new feature ideas kept emerging during development",
        "sentiment": "negative"
      },
      {
        "content": "Wanted to add financial betting component but legal complexities made this unfeasible",
        "sentiment": "negative"
      }
    ],
    "links": {
      "live": "https://babypool.vercel.app",
      "github": "https://github.com/colin-rod/babypool"
    },
    "featured": true,
    "year": 2025,
    "quarter": "Q2"
  }
]
